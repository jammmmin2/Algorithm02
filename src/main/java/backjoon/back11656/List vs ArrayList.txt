List와 ArrayList는 매우 자주 쓰이는 자료구조

✅List는 인터페이스
List는 자바에서 제공하는 자료형(컬렉션)의 공통적인 틀(인터페이스).
대표적인 구현체로는 ArrayList, LinkedList, Vector 등이 있음.
인터페이스라서 new List()처럼 직접 생성은 불가능합니다.


// ❌ 잘못된 선언 (인터페이스는 new 못함)
List a = new List; 
List<String> a1 = new List;

// ✅ 올바른 선언
ArrayList<String> a2 = new ArrayList<>();
List<String> a3 = new ArrayList<>();

✅ ArrayList는 List를 구현한 클래스
ArrayList<String> list = new ArrayList<>();
ArrayList는 실제로 동작하는 객체

내부적으로는 배열 기반 구조

데이터를 순차적으로 저장하고, 인덱스로 접근하는 데 빠름

배열처럼 동작하지만, 크기가 자동으로 늘어남

✅ List vs ArrayList 차이
비교항목	    | List<String> a = new ArrayList<>();		| ArrayList<String> a = new ArrayList<>();
선언 형태	| 인터페이스로 선언			                | 구현체로 선언
장점	        | 유연성 ↑ (추후 다른 List 구현체로 교체 가능)	| 특정 기능(ArrayList 고유 기능) 사용 가능
주 용도	    | 다형성을 활용한 코드 작성			        | ArrayList 기능을 명확히 사용할 때

즉, 보통은
👉 List<String> list = new ArrayList<>();
이렇게 쓰는 게 유연하고 실무에서 많이 씁니다.